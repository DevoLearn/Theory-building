# -*- coding: utf-8 -*-
"""Elementary cellular Automaton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LkUhUu6Yq22P-j3dSiwB4txCJdHRpFjG

This Notebook contains different cellular automata we get using different rules
"""

import numpy as np
import matplotlib.pyplot as plt

#rule number
rule_number=30

output_pattern = [int(x) for x in np.binary_repr(rule_number,width=8 )]
print(output_pattern)

"""This is the binary representation of the rule we want to mention.

This rule tells us how the cell will be in the next generation. Each rule gives us a different pattern
"""

input_pattern = np.zeros([8,3])   #for all the possible combinations in a 2D automata
for i in range(8):
  input_pattern[i, :] = [int(x) for x in np.binary_repr(7-i, width=3)]
print(input_pattern)

#let us now define the rows and cilumns in our canvas
columns = 100
rows = int(columns/2)+1

#initializing our canvas with 0s
canvas = np.zeros([rows,columns])
canvas[0,int(columns/2)+1]=1  #initializing the center cell of the first row as 1 to start the process

for i in np.arange(rows-1):
  for j in np.arange(columns):
    for k in range(8):
      if np.array_equal(input_pattern[k,:], canvas[i,j:j+3]):
        canvas[i+1, j+1] = output_pattern[k]

plt.imshow(canvas[:,1:columns+1],cmap='Greys', interpolation='nearest')
plt.title("Cellular automaton for Rule "+str(rule_number))
plt.show()









